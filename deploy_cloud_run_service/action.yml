name: "Deploy Cloud Run Service"
description: "Deploys Cloud Run Service"
inputs:
  gcp_admin_sa:
    description: "GCP admin service account"
    required: true
  working_directory:
    description: "Working directory for the Cloud Function"
    required: true
  service_name:
    description: "service name"
    required: true
  gcp_project:
    description: "gcp project"
    required: true
  gcp_region:
    description: "GCP region"
    required: false
    default: "us-central1"
  min_instances:
    description: "Minimum number of instances to launch"
    default: 0
  max_instances:
    description: "Maximum number of instances to launch"
    default: 100
  vpc_connector:
    description: "VPC Connector for private network communitation"
    required: true
  vpc_egress:
    description: "VPC egress rules for service"
    default: "private-ranges-only"
  ingress:
    description: "Ingress rules for service"
    default: "all"
  timeout:
    description: "Timeout rules for service"
    default: 300
  memory:
    description: "RAM size in Mb (e.g. 512, 1024, 2048)"
    default: 512
  cpu:
    description: "Number of vCPU core"
    default: 1
  service_account:
    description: "SA for Cloud Run service"
    required: false
    default: ""
  cloud_build_yaml_path:
    description: "path to cloudbuild.yaml (usually just 'cloudbuild.yaml' sitting in root of working directory)"
    required: true
  cloud_build_substitutions:
    description: "cloudbuild.yaml substitutions (e.g. _SERVICE_NAME=my_service,_SERVICE_PORT=4006)"
    required: true
  service_port:
    description: "service port"
    required: true
  env_vars:
    description: 'env vars passed to --set-env-vars. Formatted like:  SERVICE_STAGE=staging,GCP_REGION=us-central1,etc..'
    required: false
    default: ""
  labels:
    description: 'Cloud Run Labels, Formatted like: environment=staging,service=my_service,etc..'
    required: false
    default: ""
  secrets:
    description: 'Cloud Run secrets to be passed, Formatted like: DB_USER=keplerapp-db-user:latest,DB_PASS=keplerapp-db-password:latest,etc..'
    required: false
    default: ""
  add_cloudsql_instances:
    description: 'cloudsql instances to add (i.e. keplerscience-staging:us-central1:kepler)'
    required: false
    default: ""

runs:
  using: 'composite'
  steps:
    - uses: actions/setup-node@v2
      with:
        node-version: '16'

    - id: 'auth'
      uses: 'google-github-actions/auth@v0'
      with:
        credentials_json: '${{ inputs.gcp_admin_sa }}'

    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v0

    - name: Translate some action inputs into CLI flags
      id: translate_inputs
      run: |-
        echo "::set-output name=service_account::"
        echo "::set-output name=add_cloudsql_instances::"
        echo "::set-output name=env_vars::"
        echo "::set-output name=labels::"
        echo "::set-output name=secrets::"

        if [ "${{ inputs.service_account }}" != "" ]; then
          echo "::set-output name=service_account::--service-account=${{ inputs.service_account }}"
        fi

        if [ "${{ inputs.add_cloudsql_instances }}" != "" ]; then
          echo "::set-output name=add_cloudsql_instances::--add-cloudsql-instances=${{ inputs.add_cloudsql_instances }}"
        fi

        if [ "${{ inputs.env_vars }}" != "" ]; then
          echo "::set-output name=env_vars::--set-env-vars=${{ inputs.env_vars }}"
        fi

        if [ "${{ inputs.labels }}" != "" ]; then
          echo "::set-output name=labels::--labels=${{ inputs.labels }}"
        fi

        if [ "${{ inputs.secrets }}" != "" ]; then
          echo "::set-output name=secrets::--update-secrets=${{ inputs.secrets }}"
        fi
      shell: bash


    - name: Build
      working-directory: ${{ inputs.working_directory }}
      run: |-
        gcloud builds submit \
          --quiet \
          --substitutions=${{ inputs.cloud_build_substitutions }} \
          --config=${{ inputs.cloud_build_yaml_path }} \
          --gcs-log-dir=gs://kepler-${{ env.SERVICE_STAGE }}-cloudbuild-logs/${{ inputs.service_name }}
      shell: bash


    # TODO: Set --ingress back to "internal" after setting up proper firewall access for Gateway
    - name: Run
      working-directory: ${{ inputs.working_directory }}
      run: |-
        gcloud run deploy ${{ inputs.service_name }} \
          --allow-unauthenticated \
          --min-instances=${{ inputs.min_instances }} \
          --max-instances=${{ inputs.max_instances }} \
          --platform=managed \
          --image=gcr.io/${{ inputs.gcp_project }}/${{ inputs.service_name }} \
          --timeout=${{ inputs.timeout }} \
          --memory=${{ inputs.memory }} \
          --cpu=${{ inputs.cpu }} \
          --region=${{ inputs.gcp_region }} \
          --port=${{ inputs.service_port}} \
          --vpc-connector=${{ inputs.vpc_connector }} \
          --vpc-egress=${{ inputs.vpc_egress }} \
          --ingress=${{ inputs.ingress }} \
          ${{ steps.translate_inputs.outputs.service_account }} \
          ${{ steps.translate_inputs.outputs.add_cloudsql_instances }} \
          ${{ steps.translate_inputs.outputs.env_vars }} \
          ${{ steps.translate_inputs.outputs.labels }} \
          ${{ steps.translate_inputs.outputs.secrets }}
      shell: bash
